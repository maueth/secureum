Question 1

“The security concern(s) with InSecureumLand is/are”
 A. Single-step ownership change
 B. Incorrectly implemented KYC check using Merkle proofs
 C. Missing time-delayed change of critical parameters
 D. Accidentally sent Ether gets locked in contract
 
My answers: A, C, 
Correct: A, C

A. Ownership management is inherited from OpenZeppelin's Ownable abstract contract, which only allows for single-step ownership change. If the ownership is mistakenly changed to an incorrect address, it could be permanently lost.

B. Contract appears to correctly make use of OpenZeppelin's MerkleProof library for KYC purposes.

C. Considering attributes like operator a critical parameter, it can indeed be argued that a time-delay would improve the contract's security.

D. Contract owner is be able to call the withdraw() function to extract any accidentally sent ether.

----------

Question 2

“The security concern(s) with InSecureumLand setOperator() is/are”
 A. Missing zero-address validation
 B. Missing event emission
 C. Incorrect modifier
 D. None of the above

My answers: A, B
Correct: A, B

A. There's indeed no check for zero-addresses, which could accidentally lead to no one being the operator. This would have little impact though, since the owner is able to correct the mistake by calling the function again.

B. There's also no event emitted when the operator is changed. This makes monitoring the contract for critical changes difficult.

C. Assuming that the intention is that only the owner should be able to update the operator, there seems to be no problem with the modifier that was chosen.

----------

Question 3

“The security concern(s) with InSecureumLand mintLands() is/are”
 A. Minting could exceed max supply
 B. Minting could exceed maxMintPerTx
 C. Minting could exceed maxMintPerAddress
 D. None of the above

My answers: D
Correct: A

A. While the function checks currentNumLandsMintedPublicSale for whether the maximum supply has been exceeded, it doesn't actually ever increase this variable after minting. So it'll be possible to continue minting beyond the MAX_PUBLIC_SALE_AMOUNT value.

B. The maxMintPerTx value appears to be correctly checked against the numLands parameter.

C. The maxMintPerAddress value appears to be correctly checked against the overall amount of tokens that'll have been minted by the sender.


----------

Question 4

“Missing threshold check(s) on parameter(s) is/are a concern in”
 A. mintLands
 B. startPublicSale
 C. contributorsClaimLand
 D. None of the above

My answers: B
Correct:  B, C

The startPublicSale should have some sanity checks for passed parameters like _publicSaleStartPrice and _publicSaleEndingPrice, especially since these cannot be corrected once set. 
The contributorsClaimLand function doesn't ensure the amount parameter, of how many tokens should be claimed for the contributor, is actually lower or equal to the amount of tokens they should be able to claim according to contributors[msg.sender]. It also doesn't update this amount allowing the contributor to claim the same amount multiple times.

----------

Question 5

“The security concern(s) with InSecureumLand contributors claim functions is/are”
 A. Anyone can call startContributorsClaimPeriod
 B. Anyone can call stopContributorsClaimPeriod
 C. Anyone can call contributorsClaimLand
 D. None of the above

My answers: D
Correct: C

The first two functions can only be called by the operator. 
The contributorsClaimLand function appears to be only callable by contributors. But when looking at the onlyContributors modifier, callers are considered contributors even when they have not made any contribution (contributors[_contributor] >= 0). This error effectively allows anyone to call the contributorsClaimLand function.t

----------

Question 6

“The security concern(s) with InSecureumLand random number usage is/are”
 A. It depends on miner-influenceable block.timestamp
 B. It depends on miner-influenceable blockhash
 C. It depends on deprecated Chainlink VRF v1
 D. None of the above

My answers: 
Correct: C

It doesn't make use of miner-influenceable values for randomness. But it does indeed make use of a deprecated version of Chainlink's VRF. 
Projects should aim to make use of the most recent stable version of their dependencies before deployment.

----------

Question 7

“The documentation/readability concern(s) with InSecureumLand is/are”
 A. Stale comments
 B. Missing NatSpec
 C. Minimal inlined comments
 D. None of the above

My answers:  A, B, C
Correct: B, C

There are no NatSpec comments at all, and the few inline comments that exist mostly just repeat what the code already states instead of explaining what is going on and what is the intention.

-------

Question 8

“Potential gas optimization(s) (after appropriate security considerations) in InSecureumLand is/are”
 A. Removing nonReentrant modifier if mint addresses are known to be EOA
 B. Using _mint instead of _safeMint if mint addresses are known to be EOA
 C. Using unchecked in for loop increments
 D. None of the above

My answers:  C 
Correct: A, B, C

A. By checking msg.sender == tx.origin it can be known that the mint address, which is the mint function's caller, is an EOA, an account with a keypair and no bytecode. With that, transfer hooks are certain to not be triggered which means that nonReentrant can safely be omitted in this case.

B. If the mint address is known to be an EOA, _mint can be directly called, instead of _safeMint which first checks whether the receiver implements the hook function onERC721Received. An EOA has no bytecode, which means it's not possible that it implements this interface. A check like this also isn't necessary for EOAs since tokens cannot get stuck in them as they could in contracts.

C. Most loops increment with ++i for which the solidity compiler will add overflow checks that cost additional gas. But the loop conditions (eg. i < alphaTokenIds.length) already ensures no overflow can happen. Therefore using an unchecked block around the increment can reduce gas cost by removing the unnecessary check. To implement this would require using a different loop though, since adding an unchecked block around the for loops primary expression would cause a compiler error.