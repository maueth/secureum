Question 1
InSecureum balanceOf()
1. May be optimised by caching state variable in local variable
2. May be optimised by changing state mutability from view to pure
3. May be optimised by changing its visibility to external
4. None of the above

My answers: 4
Correct: 4

Since the _balances state variable is only accessed once and immediately returned, caching doesn't make sense.
State mutability can't be changed to pure since the function accesses a state variable, that requires at least view.
It can't be changed to external because it is currently being called internally by the balanceOfBatch() function.

----------

Question 2

In InSecureum, array lengths mismatch check is missing in
1. balanceOfBatch()
2. _safeBatchTransferFrom()
3. _mintBatch()
4. _burnBatch()

My answers: 1, 2, 3, 4 
Correct: 1, 2, 3, 4 

The public function balanceOfBatch() receives a list of accounts and a list of ids, both of which items get passed on to balanceOf(accounts[i], ids[i]);. To ensure that neither array is accessed out-of-bounds, it should be checked whether both lists are of the same length.
Neither the internal function _safeBatchTransferFrom() nor its public caller function safeBatchTransferFrom() check the length of passed ids and amounts. Therefore the check is missing.
The internal functions _mintBatch() and _burnBatch() are currently never called, but a contract extending InSecureum might. It would make sense to check the lengths of passed ids and amounts in them, so that public functions calling them do not need to remember to do so.

----------

Question 3

The security concern(s) with InSecureum _safeTransferFrom() is/are
1. Incorrect visibility
2. Susceptibility to an integer underflow
3. Missing zero-address validation
4. None of the above

My answers: 1, 2, 3
Correct: 1, 2, 3

It is prefixed with an underscore, which is usually an indication of an internal visibility, and it's also called by a similarly named public safeTransferFrom() function that applies more input validation before calling it. This validation ensures that the sender actually has approval for the transfer of funds, which would be bypassed by this function being public. It should instead be internal allowing an inheriting contract to internally call it.
The new fromBalance is calculated within an unchecked{} block, bypassing integer underflow prevention measures of Solidity version 0.8.0^. Since the fromBalance isn't checked for whether there's a sufficient balance for a transfer, this effectively allows sending unlimited amounts to the specified recipient.
Neither safeTransferFrom() nor _safeTransferFrom() are checking whether the to address is non-zero, making it possible to accidentally burn tokens.

----------

Question 4

The security concern(s) with InSecureum _safeBatchTransferFrom() is/are
1. Missing array lengths mismatch check
2. Susceptibility to an integer underflow
3. Incorrect balance update
4. None of the above

My answers: 1
Correct: 1, 3

The fact that the array lengths mismatch check is missing has already been determined in Question #2.
There's no usage of an unchecked{} block, therefore an integer underflow cannot happen with this Solidity version.
The new value of fromBalance is calculated but it's never actually updated in storage. This effectively allows sending the same tokens unlimited amount of times.

----------

Question 5
The security concern(s) with InSecureum _mintBatch() is/are
1. Missing array lengths mismatch check
2. Incorrect event emission
3. Allows burning of tokens
4. None of the above

My answers: 1, 2
Correct: 1, 2, 3

The fact that the array lengths mismatch check is missing has already been determined in Question #2.
Comparing the emission of the TransferBatch event to other occurrences, it appears that ids and amounts have been accidentally swapped.
The zero-address check incorrectly ensures that the sender is non-zero (which would never be possible anyway) instead of ensuring that the receiving account is non-zero. This effectively allows minting to the zero-address, burning all minted tokens immediately.

address[] memory to = new address[](2);
to[0] = 0x0000000000000000000000000000000000000000; // the zero-address
to[1] = 0x1234567890123456789012345678901234567890;
uint256[] memory ids = new uint256[](2);
ids[0] = 1;
ids[1] = 2;
uint256[] memory amounts = new uint256[](2);
amounts[0] = 100;
amounts[1] = 200;
As you can see, the first element of the to array is the zero-address, which should not be allowed. However, the zero-address check in _doSafeTransferAcceptanceCheck is checking that the sender is non-zero, which would always be the case, and not checking that the receiving account (to[i]) is non-zero.
So in this case, the _mintBatch function would execute without throwing an exception, and 100 tokens would be minted to the zero-address and 200 tokens would be minted to 0x1234567890123456789012345678901234567890. However, the zero-address cannot hold any tokens, so these tokens would effectively be burned immediately. This is obviously not desirable behavior and could result in a loss of tokens for the minting account.

----------

Question 6

The security concern(s) with InSecureum _burn() is/are
1. Missing zero-address validation
2. Susceptibility to an integer underflow
3. Incorrect balance update
4. None of the above

My answers: 4
Correct: 4

The zero-address validation exists and is correctly checking the value of from.
There's no usage of an unchecked{} block, therefore an integer underflow cannot happen with this Solidity version.
The balance appears to be correctly updated after subtraction.

----------

Question 7

The security concern(s) with InSecureum _doSafeTransferAcceptanceCheck() is/are
1. isContract check on incorrect address
2. Incorrect check on return value
3. Call to incorrect isContract implementation
4. None of the above

My answers: 4
Correct: 2, 3

The isContract() function is correctly called on to, which is the receiving address that is potentially a contract that this function is supposed to check support of ERC1155, before tokens are sent to it, since they'd otherwise be stuck in a contract not supporting this standard.
Comparing _doSafeTransferAcceptanceCheck() and _doSafeBatchTransferAcceptanceCheck() shows a clear discrepancy when checking the return value, with the batch function's implementation correctly checking support for the ERC1155 standard. This function is in fact currently doing the opposite, ensuring that tokens are only sent to contracts that do NOT support it.
The isContract() function currently returns true if the passed address is in fact NOT a contract (has a code length of 0). It should instead return true only when the address has a code length larger than 0, showing that there's currently a contract residing at account.

----------

Question 8

The security concern(s) with InSecureum isContract() implementation is/are
1. Incorrect visibility
2. Incorrect operator in the comparison
3. Unnecessary because Ethereum only has Contract accounts
4. None of the above

My answers: 2
Correct: 2

A visibility of internal allowing inheriting contracts to use it appears appropriate.
The comparison should indeed be "bigger-than-zero" instead of "equals-zero", for the reasons explained for the previous question.
Ethereum not only has Contract accounts but also EOA (Externally Owned Accounts), which do not have any contract code but an off-chain public-private keypair instead.